1- pnorm(10, 8.5 , 2.5/5)
pbinom(1, size = 8, prob = 0.1)
dbinom(2,  size = 8, prob = 0.1) + dbinom(3,  size = 8, prob = 0.1)
pbinom(8, size = 8, prob = 0.1)
dbinom(8, size = 8, prob = 0.1)
1 – pbinom(15 , 125, 0.1)
pbinom(15 , 125, 0.1)
1- 0.8169
1- [pbinom(15 , 125, 0.1)]
pbinom(14 , 125, 0.1)
1- 0.7329886
pbinom(9 , 125, 0.1)
pbinom(9 , 125, 0.1)
pbinom(10 , 125, 0.1)
qnorm(0.8, 0.7, 0.21/ sqrt(50))
qnorm(0.2, 0.7, 0.21/ sqrt(50))
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
pnorm(0.8, 0.7, 0.21/ sqrt(50))
0.7 * 0.3
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
1- pnorm(0.5, 0.7, 0.21/ sqrt(50))
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
0.21/ sqrt(50)
0.1/0.02969848
sqrt(0.21)
a.	1 – pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1 – pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1–pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1-pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1-pnorm(0.8 , 0.7 , 0.458/sqrt(50))
1-pnorm(0.5 , 0.7 , 0.458/sqrt(50))
c <-
v <- c( 7, -5, -8, 7, 9, 12, 0, 3, 11, 8, 6, -2, 4)
order(v)
a.	Pbinom( 3, 5, 0.8)
pbinom( 3, 5, 0.8)
1 - 0.262
pbinom( 0, 5, 0.8)
qnorm(0.1, 20,4)
4/100
dbinom(0,20,0.04)
pbinom(0,20,0.04)
1- 0.4420024
qnorm(0.25, 11.90,40)
qnorm(0.25, 11.90,.40)
qnorm(0.25, 11.90,0.40)
1- 0.01
dbinom(5, 300, 0.01)
2.3/20
1-0.115
pbinom(2, 20, 0.115)
1- 0.59
4/60
1 - pexp(15,0.0666)
pbinom(18,45,0.33)
pbinom(18,45,0.33) - pbinom(9, 45, 0.33)
pbinom(17,45,0.33) - pbinom(9, 45, 0.33)
pbinom(9, 45, 0.33)
pbinom(18,45,0.33)
pbinom(18,45,0.33) - pbinom(9, 45, 0.33)
pbinom(18.5,45,0.33) - pbinom(8.5, 45, 0.33)
pbinom(40.5,45,0.33) - pbinom(19.5, 45, 0.33)
qnorm(85,70,8)
qnorm(0.85,70,8)
pbinom(10,125,0.1)
pbinom(9,125,0.1)
45/20
2.25/20
2.3/20
1 - pbinom(2,20, 0.115)
ppois(1,3/20)
dbinom(5,300, 0.01)
dexp(11,1/5) + dexp(12,1/5) + dexp(13,1/5) +dexp(14,1/5) + dexp(15,1/5)
1 - pbinom(3.5,0.8)
1 - pbinom(3,5,0.8)
ppois(2,8)
ppois(1,3/20)
qnorm(0.03,10,2)
1 - pexp(1,0.5)
pnorm(46,50,4)
1 - pnorm(46,50,4)
qnorm(46,50,4)
qnorm(0.46,50,4)
pnorm(46,50,4)
pnorm(29000,29321,2120/sqrt(100))
pnorm(215,220,15/sqrt(40))
rm(list = ls(all=TRUE))
pnorm(29000,29321,2120/sqrt(100))
pnorm(215,220,15/sqrt(40))
1.64 *
1.64 * 0.449
1.64*0.449
sqrt(880.4)
0.14583–1.96*sqrt(0.14583*0.854/1200)
0.14583 - 1.96*sqrt(0.14583*0.854/1200)
0.14583 + 1.96*sqrt(0.14583*0.854/1200)
pnorm(215,220,15/sqrt(40))
qnorm(0.05,lower.tail = F)
marginError <- qnorm(0.05,lower.tail = F)*4.49/10
49 - marginError
49 + marginError
z <- qnorm(0.025, lower.tail = F)
n <-
p <- 175/1200
q <- 1-p
p - 1.96*sqrt(p*q/1200)
p - 1.96*sqrt(p*q/1200)
p + 1.96*sqrt(p*q/1200)
lowerLimit <- p - 1.96*sqrt(p*q/1200)
UpperLimit <- p + 1.96*sqrt(p*q/1200)
n <- 35
mean <- 2.364
var <- 0.81
qt(0.05,34,lower.tail = F) // we have 34 degrees of freedom
qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
tvalue <- qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
2.364 - tvalue * 0.9
2.364 + tvalue * 0.9
2.364 - tvalue * 0.9/sqrt(35)
2.364 + tvalue * 0.9/sqrt(35)
qnorm(0.025,lower.tail = F)
z <-qnorm(0.025,lower.tail = F)
marginError <- qnorm(0.025,lower.tail = F)
lowerLimit <- 1014 - marginError*25/10
upperLimit <- 1014 + marginError*25/10
lowerLimit
upperLimit
marginError*25/10
n <- 36
z <- qnorm(0.025,lower.tail = F)
ME <- z * 0.3/sqrt(n)
lowerLimit <- 2.6 - ME
upperLimit <- 1014 + ME
lowerLimit,upperLimit
c(lowerLimit,upperLimit)
upperLimit <- 2.6 + ME
c(lowerLimit,upperLimit)
qnorm(0.05, lower.tail = F)
pnorm(1.164,9900,120/sqrt(30))
limitOnCriticalZone <- qnorm(0.05,lower.tail = F)
pnorm(9900,10000,120/sqrt(30))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
x <- options(scipen = pnorm(9900,10000,120/sqrt(30)))
x
alpha <- 0.05
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 4)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 5)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 1)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 2)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
pnorm(9900,10000,120/sqrt(30)) # output 2.50
limitOnCriticalZone
actual <- pnorm(9900,10000,120/sqrt(30)) # output 0.000002505166
actual
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
zval
sqrt(100*0.84*0.16)
1 - pnorm(80,84,3.67)
qnorm(p.95, lower.tail = F)
qnorm(0.95, lower.tail = F)
cal <- (80-84)/ sqrt(100*0.84*0.16)
cal <- (84-80)/ sqrt(100*0.84*0.16)
qnorm(0.95, lower.tail = F)
qnorm(0.95)
qnorm(0.025)
n <- 100
p <- 0.9
q <- 1- p
1 - pnorm(80.5, n*p, sqrt(n*p*q))
pnorm(80.5, n*p, sqrt(n*p*q))
qnorm(0.95, lower.tail = F)
qnorm(0.025)
75 - (8 /sqrt(16) * qnorm(0.25))
75 - (8 /sqrt(16) * qnorm(0.025))
75- (8 /sqrt(16) * qnorm(1-0.025))
75  + (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
75  + (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
qnorm(0.05)
1-pnorm(10,11,3/sqrt(40))
3/sqrt(40)
-1/0.474
q(0.05)
qnorm(0.05)
1-0.05
q(0.975)
qnorm(0.0025)
0.05/2
qnorm(0.025)
1.96*2
qnorm(0.10)
1.28*21/6
50-4.48
1 - pnorm(45, 43, 21/6)
1 - pnorm(45.31, 43, 21/6)
pnorm(78.92, 77, 2)
-5/15log2(5/15) -10/15log2(10/15)
-((5/15)*log2(5/15)) -((10/15)*log2(10/15))
5/15
0.3333333 * log2(0.3333333)
10/15
0.6666667 * log2(0.6666667)
0.5283208 + 0.389975
-(9/15)log2(9/15)-(6/15)log2(6/15)
-[(9/15)log2(9/15)+(6/15)log2(6/15)]
-((9/15)log2(9/15)+(6/15)log2(6/15))
-((9/15)*log2(9/15))-((6/15)*log2(6/15))
-((2/5)*log2(2/5))-((3/5)*log2(3/5))
-((4/5)*log2(4/5))-((1/5)*log2(1/5))
0.9709506 - (((5/15) * 0.9709506) + ((5/15) * 0.9709506) + ((5/15) * 0.7219281))
-((4/10)*log2(4/10))-((6/10)*log2(6/10))
-((5/5)*log2(5/5))-((0/5)*log2(0/5))
-((5/5)*log2(5/5))
1log2(1)
1*log2(1)
0.9709506 - ((10/15) * 0.9709506))
0.9709506 - ((10/15) * 0.9709506)
-((3/9)*log2(3/9))-((6/9)*log2(6/9))
0.9709506 - ((9/15) * 0.9182958)
-((4/5)*log2(4/5))-((1/5)*log2(1/5))
-((2/6)*log2(2/6))-((4/6)*log2(4/6))
0.9709506 - (((5/15) * 0.7219281) + ((6/15) * 0.9182958))
-((3/4)*log2(3/4))-((1/4)*log2(1/4))
-((1/3)*log2(1/3))-((2/3)*log2(2/3))
0.9182958 - (((4/9) * 0.8112781) + ((3/9) * 0.9182958))
0.9182958 - (4/9)
1-((5/15)^2 + (5/15)^2 + (5/15)^2)
(5/15)* (1- ((2/5)^2 + (3/5)^2)) + (5/15)* (1- ((2/5)^2 + (3/5)^2)) + (5/15)* (1- ((1/5)^2 + (4/5)^2))
1-((10/15)^2 + (5/15)^2)
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
rm(list=ls(all=TRUE))
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 )
2 + 2
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/10)^2 ))
1-((9/15)^2 + (6/15)^2)
(10/15)* (1- ((6/10)^2 + (4/10)^2)) + (5/15)* (1- ((5/5)^2 ))
(9/15)* (1- ((3/9)^2 + (6/9)^2)) + (6/15)* (1- ((6/6)^2 ))
1-((5/15)^2 + (6/15)^2 + (4/15)^2)
(5/15)* (1- ((4/5)^2 + (1/5)^2)) + (6/15)* (1- ((2/6)^2 + (4/6)^2)) + (4/15)* (1- ((4/4)^2))
1-((3/7)^2 + (2/7)^2 + (2/7)^2)
(3/7)* (1- ((2/3)^2 + (1/3)^2)) + (2/7)* (1- ((1/2)^2 + (1/2)^2)) + (2/7)* (1- ((1/2)^2 + (1/2)^2))
(3/7)* (1- ((2/3)^2 + (1/3)^2)) + (4/7)* (1- ((1/2)^2 + (1/2)^2))
-((5/15)*log2(5/15) + (5/15)*log2(5/15) + (5/15)*log2(5/15))
0.083/1.584963
-((10/15)*log2(10/15) + (5/15)*log2(5/15))
0.323/0.9182958
-((9/15)*log2(9/15) + (6/15)*log2(6/15))
0.419/0.9709506
-((5/15)*log2(5/15) + (6/15)*log2(6/15) + (4/15)*log2(4/15))
0.36/1.56
rm(list = ls(all.names = TRUE))
getwd()
setwd("E:\\Insofe\\RPracticeVS\\RPracticeVS\\Cute3")
library(caret)
library(DMwR)
library(vegan)
library(randomForest)
install.packages("randomForest")
library(randomForest)
raw <- read.csv("Group13-Cute2-Final-Data.csv", header = T, sep = ",")
#removing rows having Target varialbe as 0
raw <- raw[raw$TotalRevenueGenerated > 0,]
#Check structure and summary of data
str(raw)
summary(raw)
#Converting character variables into factors
raw$FavSourceBin <- as.factor(raw$FavSourceBin)
raw$FavSource7Bin <- as.factor(raw$FavSource7Bin)
raw$FavSource30Bin <- as.factor(raw$FavSource30Bin)
raw$FavSource90Bin <- as.factor(raw$FavSource90Bin)
raw$FavSource180Bin <- as.factor(raw$FavSource180Bin)
raw$FavSource360Bin <- as.factor(raw$FavSource360Bin)
raw$FavChannelBin <- as.factor(raw$FavChannelBin)
raw$FavChannel7Bin <- as.factor(raw$FavChannel7Bin)
raw$FavChannel30Bin <- as.factor(raw$FavChannel30Bin)
raw$FavChannel90Bin <- as.factor(raw$FavChannel90Bin)
raw$FavChannel180Bin <- as.factor(raw$FavChannel180Bin)
raw$FavChannel360Bin <- as.factor(raw$FavChannel360Bin)
raw$FavGameBin <- as.factor(raw$FavGameBin)
raw$FavGame7Bin <- as.factor(raw$FavGame7Bin)
raw$FavGame30Bin <- as.factor(raw$FavGame30Bin)
raw$FavGame90Bin <- as.factor(raw$FavGame90Bin)
raw$FavGame180Bin <- as.factor(raw$FavGame180Bin)
raw$FavGame360Bin <- as.factor(raw$FavGame360Bin)
#Removing unwanted variables which have been converted to categorical type
rawFiltered <- subset(raw, select = -c(CONTACT_WID, NominationDate, OveralllastTransaction, CHILD_AGE_RANGE
, FavoriteChannel, FavoriteChannel7, FavoriteChannel30, FavoriteChannel90, FavoriteChannel180, FavoriteChannel360,
FavoriteSource, FavoriteSource7, FavoriteSource30, FavoriteSource90, FavoriteSource180, FavoriteSource360,
FavoriteGame, FavoriteGame7, FavoriteGame30, FavoriteGame90, FavoriteGame180, FavoriteGame360))
#Check Summary ans structure of the filtered data
summary(rawFiltered)
str(rawFiltered)
#separate numerical and categorical variables
numericVars <- rawFiltered[, sapply(rawFiltered, is.numeric)]
numericVarsWithoutTarget <- subset(numericVars, select = -c(TotalRevenueGenerated))
target <- data.frame(TotalRevenueGenerated = rawFiltered$TotalRevenueGenerated)
catVars <- rawFiltered[, sapply(rawFiltered, is.factor)]
catVars <- data.frame(model.matrix(~., data = catVars, contrasts.arg = lapply(catVars, contrasts, contrasts = FALSE))[, -1])
#standardize numerical Variables
numericVarsScaled <- decostand(numericVarsWithoutTarget, method = "range")
summary(numericVarsScaled)
# Make dataframe with standardized numerical variables, categorical Variables and target variable
final_df <- data.frame(numericVarsScaled, catVars, target)
str(final_df)
library(vegan)
install.packages("vegan")
library(caret)
library(DMwR)
library(vegan)
#install.packages("vegan")
library(randomForest)
#read data file
raw <- read.csv("Group13-Cute2-Final-Data.csv", header = T, sep = ",")
#removing rows having Target varialbe as 0
raw <- raw[raw$TotalRevenueGenerated > 0,]
#Check structure and summary of data
str(raw)
summary(raw)
#Converting character variables into factors
raw$FavSourceBin <- as.factor(raw$FavSourceBin)
raw$FavSource7Bin <- as.factor(raw$FavSource7Bin)
raw$FavSource30Bin <- as.factor(raw$FavSource30Bin)
raw$FavSource90Bin <- as.factor(raw$FavSource90Bin)
raw$FavSource180Bin <- as.factor(raw$FavSource180Bin)
raw$FavSource360Bin <- as.factor(raw$FavSource360Bin)
raw$FavChannelBin <- as.factor(raw$FavChannelBin)
raw$FavChannel7Bin <- as.factor(raw$FavChannel7Bin)
raw$FavChannel30Bin <- as.factor(raw$FavChannel30Bin)
raw$FavChannel90Bin <- as.factor(raw$FavChannel90Bin)
raw$FavChannel180Bin <- as.factor(raw$FavChannel180Bin)
raw$FavChannel360Bin <- as.factor(raw$FavChannel360Bin)
raw$FavGameBin <- as.factor(raw$FavGameBin)
raw$FavGame7Bin <- as.factor(raw$FavGame7Bin)
raw$FavGame30Bin <- as.factor(raw$FavGame30Bin)
raw$FavGame90Bin <- as.factor(raw$FavGame90Bin)
raw$FavGame180Bin <- as.factor(raw$FavGame180Bin)
raw$FavGame360Bin <- as.factor(raw$FavGame360Bin)
#Removing unwanted variables which have been converted to categorical type
rawFiltered <- subset(raw, select = -c(CONTACT_WID, NominationDate, OveralllastTransaction, CHILD_AGE_RANGE
, FavoriteChannel, FavoriteChannel7, FavoriteChannel30, FavoriteChannel90, FavoriteChannel180, FavoriteChannel360,
FavoriteSource, FavoriteSource7, FavoriteSource30, FavoriteSource90, FavoriteSource180, FavoriteSource360,
FavoriteGame, FavoriteGame7, FavoriteGame30, FavoriteGame90, FavoriteGame180, FavoriteGame360))
#Check Summary ans structure of the filtered data
summary(rawFiltered)
str(rawFiltered)
#separate numerical and categorical variables
numericVars <- rawFiltered[, sapply(rawFiltered, is.numeric)]
numericVarsWithoutTarget <- subset(numericVars, select = -c(TotalRevenueGenerated))
target <- data.frame(TotalRevenueGenerated = rawFiltered$TotalRevenueGenerated)
catVars <- rawFiltered[, sapply(rawFiltered, is.factor)]
catVars <- data.frame(model.matrix(~., data = catVars, contrasts.arg = lapply(catVars, contrasts, contrasts = FALSE))[, -1])
#standardize numerical Variables
numericVarsScaled <- decostand(numericVarsWithoutTarget, method = "range")
summary(numericVarsScaled)
# Make dataframe with standardized numerical variables, categorical Variables and target variable
final_df <- data.frame(numericVarsScaled, catVars, target)
str(final_df)
set.seed(123)
datapart <- createDataPartition(final_df$TotalRevenueGenerated, times = 1, p = 0.7, list = F)
pre_train <- final_df[datapart,]
pre_test <- final_df[-datapart,]
#colnames(final_dfTransform)
# Standardize all the real valued variables in the dataset as some models we use might be impacted due to non standardized variables
# Let's use the preProcess() function from the caret package to standardize the variables, using just the data points in the training data
std_method <- preProcess(pre_train, method = c("center", "scale"))
train_data <- predict(std_method, pre_train)
test_data <- predict(std_method, pre_test)
train_target <- train_data$TotalRevenueGenerated
train_data$TotalRevenueGenerated <- NULL
test_target <- test_data$TotalRevenueGenerated
test_data$TotalRevenueGenerated<- NULL
set.seed(123)
datapart <- createDataPartition(final_df$TotalRevenueGenerated, times = 1, p = 0.7, list = F)
pre_train <- final_df[datapart,]
pre_test <- final_df[-datapart,]
# sqrt Transformation to target variable
#final_df$TotalRevenueGeneratedT <- sqrt(final_df$TotalRevenueGenerated)
#final_dfTransform <- subset(final_df, select = -c(TotalRevenueGenerated))
#summary(final_dfTransform)
#colnames(final_dfTransform)
# Split Data into Train & Test
set.seed(123)
datapart <- createDataPartition(final_df$TotalRevenueGenerated, times = 1, p = 0.7, list = F)
# add library references
library(caret)
install.packages("caret")
# add library references
library(caret)
library(DMwR)
library(vegan)
#install.packages("caret")
library(randomForest)
rm(list = ls(all.names = TRUE))
getwd()
setwd("E:\\Insofe\\RPracticeVS\\RPracticeVS\\Cute3")
# add library references
library(caret)
library(DMwR)
library(vegan)
#install.packages("caret")
library(randomForest)
#read data file
raw <- read.csv("Group13-Cute2-Final-Data.csv", header = T, sep = ",")
#removing rows having Target varialbe as 0
raw <- raw[raw$TotalRevenueGenerated > 0,]
#Check structure and summary of data
str(raw)
summary(raw)
#Converting character variables into factors
raw$FavSourceBin <- as.factor(raw$FavSourceBin)
raw$FavSource7Bin <- as.factor(raw$FavSource7Bin)
raw$FavSource30Bin <- as.factor(raw$FavSource30Bin)
raw$FavSource90Bin <- as.factor(raw$FavSource90Bin)
raw$FavSource180Bin <- as.factor(raw$FavSource180Bin)
raw$FavSource360Bin <- as.factor(raw$FavSource360Bin)
raw$FavChannelBin <- as.factor(raw$FavChannelBin)
raw$FavChannel7Bin <- as.factor(raw$FavChannel7Bin)
raw$FavChannel30Bin <- as.factor(raw$FavChannel30Bin)
raw$FavChannel90Bin <- as.factor(raw$FavChannel90Bin)
raw$FavChannel180Bin <- as.factor(raw$FavChannel180Bin)
raw$FavChannel360Bin <- as.factor(raw$FavChannel360Bin)
raw$FavGameBin <- as.factor(raw$FavGameBin)
raw$FavGame7Bin <- as.factor(raw$FavGame7Bin)
raw$FavGame30Bin <- as.factor(raw$FavGame30Bin)
raw$FavGame90Bin <- as.factor(raw$FavGame90Bin)
raw$FavGame180Bin <- as.factor(raw$FavGame180Bin)
raw$FavGame360Bin <- as.factor(raw$FavGame360Bin)
#Removing unwanted variables which have been converted to categorical type
rawFiltered <- subset(raw, select = -c(CONTACT_WID, NominationDate, OveralllastTransaction, CHILD_AGE_RANGE
, FavoriteChannel, FavoriteChannel7, FavoriteChannel30, FavoriteChannel90, FavoriteChannel180, FavoriteChannel360,
FavoriteSource, FavoriteSource7, FavoriteSource30, FavoriteSource90, FavoriteSource180, FavoriteSource360,
FavoriteGame, FavoriteGame7, FavoriteGame30, FavoriteGame90, FavoriteGame180, FavoriteGame360))
#Check Summary ans structure of the filtered data
summary(rawFiltered)
str(rawFiltered)
#separate numerical and categorical variables
numericVars <- rawFiltered[, sapply(rawFiltered, is.numeric)]
numericVarsWithoutTarget <- subset(numericVars, select = -c(TotalRevenueGenerated))
target <- data.frame(TotalRevenueGenerated = rawFiltered$TotalRevenueGenerated)
catVars <- rawFiltered[, sapply(rawFiltered, is.factor)]
catVars <- data.frame(model.matrix(~., data = catVars, contrasts.arg = lapply(catVars, contrasts, contrasts = FALSE))[, -1])
#standardize numerical Variables
numericVarsScaled <- decostand(numericVarsWithoutTarget, method = "range")
summary(numericVarsScaled)
# Make dataframe with standardized numerical variables, categorical Variables and target variable
final_df <- data.frame(numericVarsScaled, catVars, target)
str(final_df)
std_method <- preProcess(pre_train, method = c("center", "scale"))
datapart <- createDataPartition(final_df$TotalRevenueGenerated, times = 1, p = 0.7, list = F)
# sqrt Transformation to target variable
#final_df$TotalRevenueGeneratedT <- sqrt(final_df$TotalRevenueGenerated)
#final_dfTransform <- subset(final_df, select = -c(TotalRevenueGenerated))
#summary(final_dfTransform)
#colnames(final_dfTransform)
# Split Data into Train & Test
set.seed(123)
datapart <- createDataPartition(final_df$TotalRevenueGenerated, times = 1, p = 0.7, list = F)
pre_train <- final_df[datapart,]
pre_test <- final_df[-datapart,]
std_method <- preProcess(pre_train, method = c("center", "scale"))
train_data <- predict(std_method, pre_train)
test_data <- predict(std_method, pre_test)
train_target <- train_data$TotalRevenueGenerated
train_data$TotalRevenueGenerated <- NULL
test_target <- test_data$TotalRevenueGenerated
test_data$TotalRevenueGenerated<- NULL
model_rf2 <- randomForest(train_target ~ ., train_data, ntree = 20, mtry = 20)
importance(model_rf2)
varImpPlot(model_rf2)
pred_train2 <- predict(model_rf2, train_data)
pred_test2 <- predict(model_rf2, test_data)
ErrorFrame = data.frame(Train20_20 = regr.eval(train_target, pred_train2))
ErrorFrame = data.frame(ErrorFrame, Test20_20 = regr.eval(test_target, pred_test2))
View(ErrorFrame)
View(ErrorFrame)

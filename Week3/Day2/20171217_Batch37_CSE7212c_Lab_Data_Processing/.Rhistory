emp[[2]][(empSal > avgSal) & (empGender == "M")]
#Q4
emp[[3]][(empSal > avgSal) & (empGender == "F")]
length(emp[[3]][empAge>25])
#Q1
emp[[3]][empAge>25]
# or alternate solution
emp[emp$empAge>26]
# or alternate solution
emp$empAge>26
emp[emp$empAge>26]
emp[2,]
# get second and fifth row
emp[c(2,5),]
emp[,2]
# get 1st nd 3rd column
emp[,c(1,3)]
emp[,1]
emp$empAge > 26
emp[emp$empAge > 26]
emp[emp$empAge > 26,]
emp$empGender = "F"
emp$empGender == "F"
emp[emp$empGender == "F",]
nrow(emp$empGender == 'F')
nrow(emp$empGender == 'F',)
nrow(emp[emp$empGender == 'F',])
#Q3
avgSal
mean(emp$empSal)
emp[emp$empSal > mean(emp$empSal)]
emp[emp$empSal > mean(emp$empSal),]
#double variable filters
emp$empSal > mean(emp$empSal)
emp[emp$empSal > mean(emp$empSal)& emp$empGender == 'M',]
emp[emp$empSal > mean(emp$empSal)& emp$empGender == 'F',]
1:10
seq(1,20,0.2)
library(rJava)
# Mathematical operations
2+2
# Order Character , Numeric and Logical
###############################  Explicit Coercion #########################
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
#Coercion results in NAs.
x <- c("25-35", "twenty five", "twenty eight",25,'25-35')
x
as.numeric(x)
as.logical(x)
m <- 1:10
m
dim(m)
dim(m) <- c(2, 5)
m
m
x <- 1:3
x
y <- 10:12
y
cbind(x, y)
rbind(x, y)
x <- list(c(1,2), "a", TRUE)
x
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 3)
is.na(x)
is.nan(x)
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
nrow(x)
ncol(x)
############################ Names & list #####################
x <- list(a = 1, b = 2, c = 3)
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m
m <- matrix(c(1:4), nrow = 2, ncol = 2)
m
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
nrow(x)
ncol(x)
############################ Names & list #####################
x <- list(a = 1, b = 2, c = 3)
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
x[1]
x <- c(2,4,6,6,8,2)
x[1]
x[2]
x[1:4]
x > 2
x[x > 2]
u <- x>2
u
x[u]
#############################  Sub-set of a matrix ####################
#Matrices can be subset in the usual way with (i , j) type indices.
x <- matrix(1:6, 2, 3)
x
x[1, 2]
x[2, 1]
# row/column  Indices can also be excluded as cited below to get only columns or only rows respectively
x[1, ]
x[, 2]
x <- c(1, 2, NA, 4, NA, 5)
x
! is.na(x)
x[! is.na(x)]
y=na.omit(x)
y
na.omit(x)
y=na.omit(x)
y
x <- 1:4; y <- 6:9
x
y
x + y
x > 2
x * y
x <- matrix(1:4, 2, 2);
x
y <- matrix(rep(10, 4), 2, 2)
y
x * y ## element-wise multiplication
x / y
x %*% y        ## true matrix multiplication
#################### Data Types (vectors, matrices & dataframes) ####################
v1=c(1,2,3,4,5) #numeric vector
v2=c("a","b","c","d","e") #character vector
v3=c(TRUE,FALSE,TRUE,FALSE,TRUE) #logical vector
str(v1) #to view structure of the vector
str(v1) #to view structure of the vector
length(v1) #to get number of  elements in the vector
str(v2)
str(v3)
str(c("fg","gh"))
cbind(v1,v2,v3) #column binding
rbind(v1,v2,v3) #row binding
#Playing with a vector
v4 = c(10,9,8,7,6,5)
max(v4)
min(v4)
mean(v4)
sd(v4)
v4[c(1,3)]#To get 1st and 3rd item
v4[v4=8] #To get elements which are greater than 8
v4
v4=8
v4
#Playing with a vector
v4 = c(10,9,8,7,6,5)
v4[v4>8] #To get elements which are greater than 8
#Matrix and data frame
M=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=TRUE) # to create a matrix
ls()
data = data.frame(v1,v2,v3) # to create a data frame
names(data)
colnames(data)
data
data
names(data) = c("ID","Name","Selected") # to assign variable names
data
data1 = data[,c(2:3)]
data1
#Handling missing values in the data
v=c(10,25,20,NA,36,100)
mean(v,na.rm=TRUE)
mean(v)
is.na(v)
v[is.na(v)]=555
v
#################### Data Types (vectors, matrices & dataframes) ####################
v1=c(1,2,3,4,5) #numeric vector
v2=c("a","b","c","d","e") #character vector
v3=c(TRUE,FALSE,TRUE,FALSE,TRUE) #logical vector
str(v1) #to view structure of the vector
str(c("fg","gh"))
cbind(v1,v2,v3) #column binding
rbind(v1,v2,v3) #row binding
attach(mtcars)
str(mtcars)
summary(mtcars)
rm(list = (ls = TRUE))
rm(list = ls(all = TRUE))
attach(mtcars)
data <- mtcars
data
View(data)
str(mtcars)
summary(mtcars)
data[,2:11]
data[,c("mpg","cyl")]
data[mpg>25]
data[mpg>25,]
data$mpg > 25
data[data$mpg > 25]
data[data$mpg > 25,]
subset(data,mpg>25, select = mpg:carb)
subset(data,mpg>25)
subset(data,mpg>25, select = mpg:cyl)
data[mpg>25 | hp >75,]
subset(data, mpg>25 | hp >75 , select = mpg:carb)
filter(data,mpg>25)
data[which(mpg>25 | hp >75)]
data[which(mpg>25 | hp >75),]
data[data$mpg >25 | data$hp > 75,]
data[mpg>25 | hp>75,]
subset(data, mpg>25 | hp>75, select= mpg:carb)
data[which(mpg>25,hp>75),]
#1 - question 1
dbinom(4,5,0.8) + dbinom(5,5,0.8)
1 - pbinom(3,5,0.8)
dgeom(3,0.2)
sqrt(25)
pnorm(80,70,sqrt(2000)/10)
1-pnorm(19.5, 50*0.5, sqrt(50*0.5*0.5))
1-pnorm(19.5, 50*0.5, sqrt(50*0.5*0.5))
1-pnorm(19.5, 50*0.25, sqrt(50*0.25*0.25))
1-pnorm(19.5, 50*0.25, sqrt(50*0.25*0.75))
pnorm(75,80,25/sqrt(50))
1 - pnorm(75,80,25/sqrt(50))
1 - pnorm(75,80,20/sqrt(50))
pnorm(75,80,20/sqrt(50))
1- pexp(2,0.5)
pnorm(75,80,20/sqrt(50))
rm(list = ls(all = TRUE))
getwd()
setwd('E:\Insofe\Week3\Day2\20171217_Batch37_CSE7212c_Lab_Data_Processing')
setwd('E:\\Insofe\\Week3\\Day2\\20171217_Batch37_CSE7212c_Lab_Data_Processing')
setwd('E:\\Insofe\\Week3\\Day2\\20171217_Batch37_CSE7212c_Lab_Data_Processing')
getwd()
library(XLConnect)
require(XLConnect)
German_Credit2 <- loadWorkbook("German_Credit2.xls")
rm(list = ls(all = TRUE))
part1 <- readWorksheetFromFile("German_Credit2.xls",sheet="Part1")
names(part1)
#change case of column names
tolower(names(part1))
part2 <- readWorksheetFromFile("German_Credit2.xls", sheet="Part2")
names(part1) <- tolower(names(part1))
names(part1) # gives column name
summary(part1)
CatData <- subset(part1, select = -c('duration', 'amount','install_rate','age','num_credits','num_dependents'))
CatData <- subset(part1, select = -c(duration, amount,install_rate,age,num_credits,num_dependents))
# make these data types as categorical - which is same as factors
CatData <- apply(CatData,2,factor)
CatData
summary(CatData)
str(CatData)
View(CatData)
CatData1 <- data.frame(CatData)
summary(CataData1)
summary(CatData1)
NumericData <- subset(part1, select = c(duration, amount,install_rate,age,num_credits,num_dependents))
# bind this data again back to original data
combinedData <- data.frame(NumericData, CatData1)
nomiss <- na.omit(combinedData)
nomiss
# how to know missing value rows
missingRows <- combinedData[!complete.cases(combinedData),]
missingRows
View(missingRows)
library(DMwR)
#if only 1 column has NA we can still have data
manyNAs(combinedData[1:15,])
#if only 1 column has NA we can still have data
manyNAs(combinedData[1:15],)
manyNAs(combinedData[1:15],0.2) # 2% rows and output is rowIds
combinedData[manyNAs(combinedData[1:15],0.2),]
combinedData[manyNAs(combinedData,0.2),]
combinedData[manyNAs(combinedData,0.4),]
# for first 15 rows
combinedData[manyNAs(combinedData[1:15,],0.4),]
# for first 15 rows
combinedData[manyNAs(combinedData[1:100,],0.4),]
# for first 15 rows
combinedData[manyNAs(combinedData[1:15,],0.4),]
combinedData[manyNAs(combinedData[1:100,],0.4),]
x <- combinedData[manyNAs(combinedData[1:100,],0.4),]
nrow(x)
# i.) centralImputation function
centralImpite <- centralImputation(combinedData)
centralImpite
manyNAs(centralImpite)
# ii. ) KNN imputation
knnmpute <- knnImputation(combinedData,3) # 3 is the number of nearest numbers
knnmpute
View(knnmpute)
manyNAs(knnmpute)
summary(knnmpute)
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[,1,3,4],30)) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[:1,3,4],30)) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[:c(1,3,4)],30)) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[,c(1,3,4)],30)) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[,c(1,3,4)],3)) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[,c(1,3,4)])) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation((combinedData[,c(1,3,4)]),3) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation(combinedData[,c(1,3,4)],3) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation(combinedData[,c(1,3,4)],2) # it chooses neighbours based on 1,3,4th column
# if we want to specify columns to find neighbours for distance
knnImputation(combinedData[,c(1,3,4)]) # it chooses neighbours based on 1,3,4th column
# install a library vegan
library(vegan)
range = decostand(NumericData,"range")
range
range <- decostand(na.omit(NumericData), "range")
range
View(range)
summary(range)
stde <- decostand(na.omit(NumericData), "standardize")
summary(stde)
#Binning
install.packages("infotheo")
library(infotheo)
amntBin <- discretize(NumericData$duration, disc = "equalfreq")
amntBin
table(amntBin$X)
amntBin <- discretize(NumericData$amount, disc = "equalfreq")
table(amntBin$X)
# if we want to decide number of bins
amntBin <- discretize(NumericData$amount,5,disc = "equalfreq")
table(amntBin)
amntWidth <- discretize(NumericData$amount,5,disc="equalwidth")
table(amntWidth)
table(amntWidth$X)
table(amntWidth$x)
amntWidth <- discretize(na.omit(NumericData$amount),5,disc="equalwidth")
table(amntWidth$x)
amntWidth <- discretize(na.omit(NumericData$amount),5,disc="equalwidth")
amntWidth
table(amntWidth$X)
#Manual Binning
na.omit(NumericData$amount)
summary(na.omit(NumericData$amount))
CreateCustomizeBin <- function(x){
if(x  >= 250 & x <2500) {
bin = "1"
} else if(x >= 2500 & x < 4000){
bin = "2"
}
else {
bin = "3"
}
return(bin)
}
# sapply is used on a vector
sapply(na.omit(numericData$amount), CreateCustomizeBin)
# sapply is used on a vector
sapply(na.omit(NumericData$amount), CreateCustomizeBin)
table(binAmnt)
binAmnt <- sapply(na.omit(NumericData$amount), CreateCustomizeBin)
table(binAmnt)
install.packages("dummies")
library(dummies)
edu <- dummy(CatData1$education)
edu
View(edu)
head(edu)
demo <- cbind(CatData1$education, edu)
head(demo)
rm(list=ls(all=TRUE))
getwd()
getwd()
setwd('E:\\Insofe\\Week3\\Day2\\20171217_Batch37_CSE7212c_Lab_Data_Processing\\')
getwd()
getwd()
library(XLConnect)
require(XLConnect)
part1 <- readWorksheetFromFile("German_Credit2.xls",sheet="Part1")
View(part1)
View(part1)
names(part1)
# to lowercase
tolower(names(part1))
# to lowercase
part2 <- tolower(names(part1))
summary(part1)
str(part1)
part2
categorical data <- subset(part2, select = -c(duration, amount,install_rate,age,num_credits,num_dependents))
rm(list = ls(all = TRUE))
getwd()
library(XLConnect)
part1 <- readWorksheetFromFile("German_Credit2.xls", sheet = "Part1")
tolower(names(part1))
names(part1)
names(part1) <- tolower(names(part1))
head(part1)
summart(part1)
summary(part1)
CatData <- subset(part1,select = -c(duration, amount,install_rate,age,num_credits,num_dependents))
CatData <- apply(CatData, 2,factor)
summary(CatData)
CatData1 <- data.frame(CatData)
NumericData <- subset(part1, select= c(duration, amount,install_rate,age,num_credits,num_dependents))
CombinedData <- data.frame(NumericData,CatData1)
CombinedData
summary(CombinedData)
str(CombinedData)
is.na(CombinedData$new_car)
nrow(CombinedData)
na.omit(CombinedData)
nomiss <- na.omit(CombinedData)
CombinedData
missing_rows <- CombinedData[!complete.cases(CombinedData),]
View(missing_rows)
complete.cases(CombinedData)
!complete.cases(CombinedData)
CombinedData[!complete.cases(CombinedData),]
library(DMwR)
manyNAs(CombinedData, nORp = 0.2)
manyNAs(CombinedData, nORp = 0.2)
View(CombinedData)
CombinedData[manyNAs(CombinedData,0.2),]
dim(CombinedData)
centralImputation(combinedData)
centralImputation(CombinedData)
head(centralImputation(CombinedData))
head(centralImputation(CombinedData),20)
summary(CombinedData$amount)
manyNAs(centralImputation(CombinedData))
manyNAs(CombinedData)
manyNAs(centralImputation(CombinedData))
knnImputation(CombinedData,3)
knnimpute <- knnImputation(CombinedData,3)
manyNAs(knnimpute)
summary(knnimpute)
NumericData
manyNAs(NumericaData)
manyNAs(NumericData)
NumericData[!complete.cases(NumericData),]
library(vegan)
decostand(NumericData,"range")
decostand(na.omit(NumericData),"range")
range <- decostand(na.omit(NumericData),"range")
summary(range)
stde <- decostand(na.omit(NumericData),"standardize")
summary(stde)
library(infotheo)
discretize(NumericData$amount,"equalfreq")
amntBin <- discretize(NumericData$amount,"equalfreq")
amntBin
table(amntBin$X)
amntBin <- discretize(NumericData$amount,5,"equalfreq")
amntBin <- discretize(NumericData$amount,5,disc="equalfreq")
table(amntBin$X)
sum(amntBin$x)
table(amntBin$X)
amntWidth <- discretize(NumericData, disc="equalWidth")
amntWidth <- discretize(NumericData, disc="equalwidth")
table(amntBin$X)
amntWidth <- discretize(NumericData,5, disc="equalwidth")
table(amntBin$X)
CreateCustomBin <- function(x){
if(x >= 250 & x <= 2500) {
bin = "1"
}
else if (x >2500 & x <4000){
bin = "2"
}
else {
bin = "3"
}
return(bin)
}
sapply(NumericData$amount, CreateCustomBin)
sapply(na.omit(NumericData$amount), CreateCustomBin)
binAmnt <- sapply(na.omit(NumericData$amount), CreateCustomBin)
table(binAmnt$X)
table(binAmnt)
library(dummies)
edu <- CatData$education
edu <- CatData1$education
edu
edu <- dummy(CatData1$education)
View(CatData1)
demo <- cbind(CatData1$education,edu)
head(demo)
head(demo,15)
View(CatData1)

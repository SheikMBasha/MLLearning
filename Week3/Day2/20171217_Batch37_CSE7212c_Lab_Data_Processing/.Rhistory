pnorm(215,220,15/sqrt(40))
1.64 *
1.64 * 0.449
1.64*0.449
sqrt(880.4)
0.14583â€“1.96*sqrt(0.14583*0.854/1200)
0.14583 - 1.96*sqrt(0.14583*0.854/1200)
0.14583 + 1.96*sqrt(0.14583*0.854/1200)
pnorm(215,220,15/sqrt(40))
qnorm(0.05,lower.tail = F)
marginError <- qnorm(0.05,lower.tail = F)*4.49/10
49 - marginError
49 + marginError
z <- qnorm(0.025, lower.tail = F)
n <-
p <- 175/1200
q <- 1-p
p - 1.96*sqrt(p*q/1200)
p - 1.96*sqrt(p*q/1200)
p + 1.96*sqrt(p*q/1200)
lowerLimit <- p - 1.96*sqrt(p*q/1200)
UpperLimit <- p + 1.96*sqrt(p*q/1200)
n <- 35
mean <- 2.364
var <- 0.81
qt(0.05,34,lower.tail = F) // we have 34 degrees of freedom
qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
tvalue <- qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
2.364 - tvalue * 0.9
2.364 + tvalue * 0.9
2.364 - tvalue * 0.9/sqrt(35)
2.364 + tvalue * 0.9/sqrt(35)
qnorm(0.025,lower.tail = F)
z <-qnorm(0.025,lower.tail = F)
marginError <- qnorm(0.025,lower.tail = F)
lowerLimit <- 1014 - marginError*25/10
upperLimit <- 1014 + marginError*25/10
lowerLimit
upperLimit
marginError*25/10
n <- 36
z <- qnorm(0.025,lower.tail = F)
ME <- z * 0.3/sqrt(n)
lowerLimit <- 2.6 - ME
upperLimit <- 1014 + ME
lowerLimit,upperLimit
c(lowerLimit,upperLimit)
upperLimit <- 2.6 + ME
c(lowerLimit,upperLimit)
qnorm(0.05, lower.tail = F)
pnorm(1.164,9900,120/sqrt(30))
limitOnCriticalZone <- qnorm(0.05,lower.tail = F)
pnorm(9900,10000,120/sqrt(30))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
x <- options(scipen = pnorm(9900,10000,120/sqrt(30)))
x
alpha <- 0.05
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 4)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 5)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 1)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 2)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
pnorm(9900,10000,120/sqrt(30)) # output 2.50
limitOnCriticalZone
actual <- pnorm(9900,10000,120/sqrt(30)) # output 0.000002505166
actual
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
zval
sqrt(100*0.84*0.16)
1 - pnorm(80,84,3.67)
qnorm(p.95, lower.tail = F)
qnorm(0.95, lower.tail = F)
cal <- (80-84)/ sqrt(100*0.84*0.16)
cal <- (84-80)/ sqrt(100*0.84*0.16)
qnorm(0.95, lower.tail = F)
qnorm(0.95)
qnorm(0.025)
n <- 100
p <- 0.9
q <- 1- p
1 - pnorm(80.5, n*p, sqrt(n*p*q))
pnorm(80.5, n*p, sqrt(n*p*q))
qnorm(0.95, lower.tail = F)
qnorm(0.025)
75 - (8 /sqrt(16) * qnorm(0.25))
75 - (8 /sqrt(16) * qnorm(0.025))
75- (8 /sqrt(16) * qnorm(1-0.025))
75  + (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
75  + (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
qnorm(0.05)
1-pnorm(10,11,3/sqrt(40))
3/sqrt(40)
-1/0.474
q(0.05)
qnorm(0.05)
1-0.05
q(0.975)
qnorm(0.0025)
0.05/2
qnorm(0.025)
1.96*2
qnorm(0.10)
1.28*21/6
50-4.48
1 - pnorm(45, 43, 21/6)
1 - pnorm(45.31, 43, 21/6)
pnorm(78.92, 77, 2)
?seq
#To create sequence of nummbers
seq(1,5, by=.5)
#Repeating a number
rep(1,10)
getwd()
rm(list = ls(all=TRUE)
rm(list = ls(all=TRUE)
rm(list = ls(all=TRUE))
getwd()
getwd()
setwd('E://Insofe//Week1//R//Day2 Piazza//20171203_Batch37_CSE7212c_R_lab01_Basics02')
getwd()
?read.csv
Grade <- read.csv("Grade.csv", header = T, sep=",")
View(Grade)
read <- read.table("greek.txt", header = T, sep = "\t")
view(read)
View(read)
library(XLConnect)
workbook <- loadWorkbook("Book3.xlsx")
worksheet <- readWorksheet(workbook, sheet = "Sheet1", header = T)
View(worksheet)
?readWorksheetFromFile
worksheet1 <- readWorksheetFromFile("Book3.xlsx",sheet="Sheet1", header=T)
worksheet1
View(worksheet1)
?write.csv
read
write.csv(Grade,file="WriteTest.csv",row.names = F)
library(xlsx)
?write.xlsx
write.xlsx(worksheet1,"WriteXL.xlsx", sheetName = "Dummy",row.names = F)
if (x <30){
print('x is less than 30')
}
x <- 35
if (x <30){
print('x is less than 30')
}
if (x > 30){
print('x is less than 30')
}
print(x is numeric)
x <- 35
if(is.numeric(x)){
print('x is numeric')
}
x <- c(10,20,NA,NaN,50)
is.na(x)
na.omit(x)
x
y <- na.omit(x)
y
y
x <- 35
if(x >35){
print("middle aged")
}
if(x >=35){
print("middle aged")
}
x <- c("what","is","truth")
if('Truth' %in% x)
if('Truth' %in% x)
if('Truth' %in% x){
print('truth in x')
}
if('Truth' %in% x){
print('truth in x')
} else {
print('no truth')
}
v <- LETTERS[1:4]
v
v <- letters[1:4]
v
for(i in v){
print(i)
}
print(v[i])
for (i in 1:length(v)){
print(v[i])
}
cnt <- 0
while(cnt < 4){
print(v)
cnt <- cnt + 1
}
while(cnt < length(v)){
print(v[cnt])
}
while(cnt < length(v)){
print(v[cnt])
cnt <- cnt + 1
}
cnt <- 0
while(cnt < length(v)){
print(v[cnt])
cnt <- cnt + 1
}
cnt <- 1
while(cnt < length(v)){
print(v[cnt])
cnt <- cnt + 1
}
while(cnt <= length(v)){
print(v[cnt])
cnt <- cnt + 1
}
cnt <- 1
while(cnt <= length(v)){
print(v[cnt])
cnt <- cnt + 1
}
Grade
View(Grade)
Grade$class <- NA
for(i in 1:nrow(Grade)){
if(Grade$OverallPct1 < 40){
Grade$class <- 'C'
} else if(Grade$OverallPct1 < 60){
Grade$class <- 'B'
} else {
Grade$class <- 'A'
}
}
for(i in 1:nrow(Grade)){
if(Grade$OverallPct1 < 40){
Grade$class[i] <- 'C'
} else if(Grade$OverallPct1 < 60){
Grade$class[i] <- 'B'
} else {
Grade$class[i] <- 'A'
}
}
View(Grade)
for(i in 1:nrow(Grade)){
if(Grade$OverallPct1[i] < 40){
Grade$class[i] <- 'C'
} else if(Grade$OverallPct1[i] < 60){
Grade$class[i] <- 'B'
} else {
Grade$class[i] <- 'A'
}
}
Grade$class1 <- ifelse(Grade$OverallPct1 < 40, Grade$class1 <- "C", ifelse(Grade$OverallPct1 <60, Grade$class1 <- "B", Grade$class1 <- "c"))
Grade$class1 <- ifelse(Grade$OverallPct1 < 40, "C", ifelse(Grade$OverallPct1 <60, "B", "A"))
Grade$class2 <- ifelse(Grade$OverallPct1 < 40 | Grade$Math1 < 60 , "C",
ifelse(Grade$OverallPct1 < 60, "B","A"))
library(sqldf)
install.packages("sqldf")
library(sqldf)
head(Grade)
sqldf(select * from Grade limit 6)
sqldf("select * from Grade limit 6")
v <- c(1,2,3,4,5)
mean(v)
median(v)
sd(v)
square <- function(x){
return (x^2)
}
square(v)
data <- mtcars
str(data)
summary(data)
data$mpg
min(data$mpg)
array
?apply(array, margin, ...)
apply(data,2,min)
apply(data[,2:11], 2, min)
apply(data[,2:11],2,max)
MyStats <- function(x){
"Mean" = mean(x)
"Min" = min(x)
"Max" = max(x)
A <- data.frame(Min,Max,Mean)
return (A)
}
apply(data,2, FUN = MyStats
apply(data,2, FUN = MyStats)
apply(data,2, FUN = MyStats)
lapply(data[,2:11], min)
tapply(data$mpg, data$cyl, mean)
v <- c(1,2,3,4,5)
v[v>3]
?which
which(v>3)
data[,2:11]
data[,c("mpg","cyl")]
data[mpg>25]
data[mpg>25,]
data[data$mpg>25,]
data[mpg>25]
data[data$mpg>25 & data$hp > 75]
data[data$mpg>25 & data$hp > 75,]
?subset
subset(data, mpg >25, select = mpg:cyl)
subset(data, mpg >25 | gear== 5, select = mpg:cyl)
subset(data, mpg >25 | gear== 5, select = c(mpg,cyl,am))
dim(data)
head(data)
tail(data)
head(data,6)
head(data,1)
tail(data,1)
str(Grade)
Grade$StudentId <- as.character(Grade$StudentId)
typeof(Grade$StudentId)
Grade1 <- read.csv("Grade1.csv", header = T, sep = ",")
Grade2 <- read.csv("Grade2.csv", header = T, sep=",")
print(Grade1)
View(Grade1)
View(Grade2)
?merge
merge(Grade1,Grade2, by=c(StudentId),all=T)
merge(Grade1,Grade2, by=c("StudentId"),all=T)
sqldf("select * from Grade1 g1 inner join Grade2 g2 on g1.StudentId = g2.StudentId")
list=ls(all=T)
rm(list=ls(all=T))
getwd()
library(XLConnect)
?readWorksheetFromFile
part1 <- readWorksheetFromFile("German_Credit2.xlsx",sheet="Part1", header=T)
part1 <- readWorksheetFromFile("German_Credit2.xls",sheet="Part1", header=T)
getwd()
setwd("E:\\Insofe\\Week3\\Day2\\20171217_Batch37_CSE7212c_Lab_Data_Processing")
getwd()
part1 <- readWorksheetFromFile("German_Credit2.xls",sheet="Part1", header=T)
View(part1)
names(part1)
names(part1) <- tolower(names(part1))
names(part1)
summary(part1)
str(part1)
catPart1 <- subset(part1, select= -c(duration, amount,install_rate,age,num_credits,num_dependents))
NumericPart1 <- subset(part1, select= c(duration, amount,install_rate,age,num_credits,num_dependents))
str(part1)
CatPart1SQL <- sqldf(part1, "select obs,new_car,used_car,furniture,radio_tv, education,retraining,co_applicant,guarantor,real_estate,prop_unkn_none, other_install,rent, own_res, telephone, foreign, response from part1")
CatPart1SQL <- subset(part1, select = sqldf("select obs,new_car,used_car,furniture,radio_tv, education,retraining,co_applicant,guarantor,real_estate,prop_unkn_none, other_install,rent, own_res, telephone, foreign, response from part1"))
CatPart1SQL <- subset(part1, select = sqldf("select obs,new_car,used_car,furniture,radio_tv, education,retraining,co_applicant,guarantor,real_estate,prop_unkn_none, other_install,rent, own_res, telephone, foreign, response from part1"))
CatPart1SQL <- sqldf("select obs,new_car,used_car,furniture,radio_tv, education,retraining,co_applicant,guarantor,real_estate,prop_unkn_none, other_install,rent, own_res, telephone, foreign, response from part1")
sqldf("select obs,new_car,used_car,furniture,radio_tv, education,retraining,co_applicant,guarantor,real_estate,prop_unkn_none, other_install,rent, own_res, telephone, foreign, response from part1")
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, foreign, response from part1")
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone from part1")
CatPart1SQL
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, foreign, response from part1")
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, response from part1")
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, foreign, response from part1")
CatPart1SQL <- sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, [foreign], response from part1")
CatPart1SQL <- apply(CatPart1SQL, 2,factor)
str(CatPart1SQL)
View(CatPart1SQL)
View(catPart1)
NumericPart <- subset(part1, select = c(duration, amount,install_rate,age,num_credits,num_dependents))
NumericPart
str(NumericPart)
str(CatPart1SQL)
NumericPartSQL <- sqldf("select duration, amount,install_rate,age,num_credits,num_dependents from part1")
str(NumericPartSQL)
str(catPart1)
catPart1 <- apply(CatPart1, 2, factor)
catPart1 <- apply(catPart1, 2, factor)
str(catPart1)
str(CatPart1SQL)
combinedData <- data.frame(catPart1, NumericPart1)
combinedDataSQL <- data.frame(CatPart1SQL,NumericPartSQL)
str(combinedDataSQL)
sqldf(select * from combinedData)
sqldf(select * from combinedDataSQL)
sqldf(select * from CatPart1SQL)
sqldf(select new_car from CatPart1SQL)
sqldf("select * from CatPart1SQL")
sqldf("select * from combinedDataSQL")
str(combinedDataSQL)
sqldf("select * from combinedDataSQL")
complete.cases(combinedDataSQL)
combinedData[,!complete.cases(combinedDataSQL)]
combinedData[!complete.cases(combinedDataSQL),]
?complete.cases
combinedDataSQL[!complete.cases(combinedDataSQL),]
nomiss <- na.omit(combinedDataSQL)
nrow(nomiss)
missing <- combinedDataSQL[!complete.cases(),]
missing <- combinedDataSQL[!complete.cases(combinedDataSQL),]
missing
library(DMwR)
?manyNAs
manyNAs(combinedDataSQL, 0.2)
manyNAs(combinedDataSQL, 0.5)
combinedDataSQL[manyNAs(combinedDataSQL,0.2),]
combinedDataSQL[manyNAs(combinedDataSQL,0.5),]
centralImpite <- centralImputation(combinedDataSQL)
!complete.cases(centralImpite)
manyNAs(centralImpite)
?knnImputation
library(vegan)
?decostand
decostand(NumericPart1,"range")
decostand(na.omit(NumericPart1),"range")
range <- decostand(na.omit(NumericPart1),"range")
summary(range)
standard <- decostand(na.omit(NumericPart1),"standardize")
summary(standard)
install.packages("infotheo")
library(infotheo)
?discretize
amntBin <- discretize(NumericPart$amount, disc = "equalfreq")
amntBin
table(amntBin$X)
amntBinCounted <- discretize(NumericPart$amount, disc="equalfreq",nbins = 5)
table(amntBinCounted$X)
amntBin <- discretize(NumericPart$amount, disc="equalwidth")
amntBin$x
table(amntBin$x)
amntBin <- discretize(NumericPart$amount,e, disc="equalwidth")
amntBin <- discretize(NumericPart$amount,5, disc="equalwidth")
table(amntBin$x)
amntBin <- discretize(na.omit(NumericPart$amount),5, disc="equalwidth")
table(amntBin$x)
library(dummies)
edu <- dummy(CatPart1SQL$education)
CatPart1SQL
typeof(catPart1$education)
typeof(CatPart1SQL)
typeof(CatPart1SQL$education)
dummy(CatPart1SQL$education)
dummy(part1$education)
class(part1)
class(CatPart1SQL)
CatPart1SQL <- data.frame(sqldf("select obs,new_car,used_car,
furniture,radio_tv, education,
retraining,co_applicant,guarantor,
real_estate,prop_unkn_none,
other_install,rent, own_res,
telephone, [foreign], response from part1"))
class(CatPart1SQL)
dummy(CatPart1SQL$education)
edu <- dummy(CatPart1SQL$education)
edu
cbind(CatPart1SQL$education,edu)

v=c(10,25,20,NA,36,100)
mean(v,na.rm=TRUE)
mean(v)
is.na(v)
v[is.na(v)]=555
v
#################### Data Types (vectors, matrices & dataframes) ####################
v1=c(1,2,3,4,5) #numeric vector
v2=c("a","b","c","d","e") #character vector
v3=c(TRUE,FALSE,TRUE,FALSE,TRUE) #logical vector
str(v1) #to view structure of the vector
str(c("fg","gh"))
cbind(v1,v2,v3) #column binding
rbind(v1,v2,v3) #row binding
attach(mtcars)
str(mtcars)
summary(mtcars)
rm(list = (ls = TRUE))
rm(list = ls(all = TRUE))
attach(mtcars)
data <- mtcars
data
View(data)
str(mtcars)
summary(mtcars)
data[,2:11]
data[,c("mpg","cyl")]
data[mpg>25]
data[mpg>25,]
data$mpg > 25
data[data$mpg > 25]
data[data$mpg > 25,]
subset(data,mpg>25, select = mpg:carb)
subset(data,mpg>25)
subset(data,mpg>25, select = mpg:cyl)
data[mpg>25 | hp >75,]
subset(data, mpg>25 | hp >75 , select = mpg:carb)
filter(data,mpg>25)
data[which(mpg>25 | hp >75)]
data[which(mpg>25 | hp >75),]
data[data$mpg >25 | data$hp > 75,]
data[mpg>25 | hp>75,]
subset(data, mpg>25 | hp>75, select= mpg:carb)
data[which(mpg>25,hp>75),]
#1 - question 1
dbinom(4,5,0.8) + dbinom(5,5,0.8)
1 - pbinom(3,5,0.8)
dgeom(3,0.2)
sqrt(25)
pnorm(80,70,sqrt(2000)/10)
1-pnorm(19.5, 50*0.5, sqrt(50*0.5*0.5))
1-pnorm(19.5, 50*0.5, sqrt(50*0.5*0.5))
1-pnorm(19.5, 50*0.25, sqrt(50*0.25*0.25))
1-pnorm(19.5, 50*0.25, sqrt(50*0.25*0.75))
pnorm(75,80,25/sqrt(50))
1 - pnorm(75,80,25/sqrt(50))
1 - pnorm(75,80,20/sqrt(50))
pnorm(75,80,20/sqrt(50))
1- pexp(2,0.5)
pnorm(75,80,20/sqrt(50))
1 -pnorm(2.02,2,0.7)
0.7/sqrt(50)
(2.2-2)/(0.7/sqrt(50))
pnorm((2.2-2)/(0.7/sqrt(50)),2,(0.7/sqrt(50)))
1 - pnorm((2.2-2)/(0.7/sqrt(50)),2,(0.7/sqrt(50)))
1 - pnorm((2.2-2)/(0.7/sqrt(50)),0,1))
1 - pnorm((2.2-2)/(0.7/sqrt(50)),0,1)))
1 - pnorm((2.2-2)/(0.7/sqrt(50)),0,1)
1- pnorm(2.2,2,0.7)
1- pnorm(2.2,2,0.7/sqrt(50))
1 - pnorm(6,6,3)
1 - porm(0,0,1)
1 - pnorm(0,0,1)
pnorm(40,40,4)
pnorm(40,30,4)
1 - pnorm(21,30,4)
pnorm(35,30,4) - pnorm(30,30,4)
1- pnorm(100,90,10)
1 -pnorm(1,1,0)
pnorm(1,1,0)
pnorm(100,90,10)
1- pnorm(100,90,10)
pnorm(1.34,1,0) - pnorm(0,1,0)
pnorm(70,50,15) - pnorm(50,50,15)
pnorm(1.33,1,0) - pnorm(0,1,0)
pnorm(1.33,1,0)
pnorm(0,1,0)
pnorm(50,50,15)
pnorm(70,50,15)
pnorm(1.33,0,1) - pnorm(0,0,1)
pnorm(70,50,15) - pnorm(50,50,15)
pnorm(585,500,100)
pnorm(5.02,5,0.02) - pnorm(4.98,5,0.02)
pnorm(5.04,5,0.02) - pnorm(4.96,5,0.02)
pnorm(7,12,2)
pnorm(-2.5,0,1)
pnorm(12,12,2) - pnorm(7,12,2)
pnorm(-2.5,0,1) - pnorm(0,0,1)
pnorm(19.5,20,2)
1 - pnorm(19.5,20,2)
pnorm(22,20,2) - pnorm(20,20,2)
1- pnorm(80,70,10)
1- pnorm(80,70,10)
1 - pnorm(59,70,10)
pnorm(60,70,10)
1- pnorm(80,70,10)
1 - pnorm(60,70,10)
pnorm(60,70,10)
pnorm(40000, 50000,20000)
pnorm(65000,50000,20000) - pnorm(45000,50000,20000)
1 - pnorm(70000,50000,20000)
1 - pnorm(125,100,15)
1 - pnorm(125,100,15)
pnorm(75,100,15)
pnorm(70,100,15)
qnorm(95,100,15)
qnorm(0.95,100,15)
qnorm(0.9,10,13)
pnorm(0.9,10,13)
1 - pnorm(0.9,10,13)
qnorm(0.95,100,15)
1- qnorm(0.95,100,15)
1- qnorm(0.9,100,15)
1 - qnorm(0.05,1.5,9.7)
qnorm(0.05,1.5,9.7)
1 - pnorm(0.05,1.5,9.7)
1 - pnorm(-14.455,1.5,9.7)
1 - pnorm(14.455,1.5,9.7)
qnorm(0.9,100,15)
pnorm(90,44.5,7.42) - pnorm(10,44.5,7.42)
qnorm(0.9,44.5,7.42) - qnorm(0.10,44.5,7.42)
qnorm(0.9,44.5,7.42)
qnorm(0.10,44.5,7.42)
pnorm(54,36.1,8.20)- pnorm(35,36.1,8.20)
pnorm(54,44.5,7.42) - pnorm(35,44.5,7.42)
1-qnorm(0.16,1500,300)
qnorm(0.16,1500,300)
qnorm(0.0015,1500,300)
1- qnorm(0.16,1500,300)
1-qnorm(0.08,71,4.5)
qnorm(0.95,100,15)
1- qnorm(0.2,71,4.5)
qnorm(0.2,71,4.5)
1- qnorm(0.8,71,4.5)
qnorm(0.8,71,4.5)
qnorm(0.9, 10, 1.3)
qnorm(0.9, 10, 1.3)
qnorm(0.9, 10, 1.3)
qnorm(0.1,10,1.3)
pnorm(8.336,6.75,1.5)
1 - pnorm(8.336,6.75,1.5)
qnorm(0.05,1.5,9.7)
1 -pnorm(-14.45,1.5,9.7)
1 -pnorm(14.45,1.5,9.7)
pnorm(14.45,1.5,9.7)
pnorm(14.45,1.5,9.7)
1 -pnorm(14.45,1.5,9.7)
qnorm(0.1,44.5,7.42)
pnorm(54,36.1,8.20) - pnorm(35,36.1,8.20)
pnorm(54,44.5,7.42) - pnorm(35,44.5,7.42)
1 - pnorm(5000,0.5,17000)
1 - pnorm(5000,0.5,17000/sqrt(40))
pnorm(500000,650000,125000/sqrt(5))
sqrt(0.57 * 0.43)
pnorm(50,0.57,0.049)
pnorm(0.5,0.57,0.049)
qnorm(0.5,0.57,0.049)
sqrt((0.57*0.43)/100)
pnorm(50,0.57,0.049)
pnorm(0.5,0.57,0.049)
qnorm(0.85,70,8)
pnorm(900, 1000, 240)
qnorm(0.99, 1000, 240)
pnorm(80, 100, 15)
1- pnorm(120, 100, 15)
qnorm(0.02,100,15)
qnorm(0.98,100,15)
1-pnorm(120,110,20/sqrt(5)))
1-pnorm(120,110,20/sqrt(5))
1-pnorm(120,110,20/sqrt(25))
1-pnorm(120,110,20/5)
pnorm(29000,29321,212)
0.63/5
1-pnorm(3,2.89,0.126)
1-pnorm(3,2.89,0.63/5)
pnorm(120,110,4)
1-pnorm(120,110,4)
pnorm(25,12,8/sqrt(4)) - pnorm(8,12,8/sqrt(4))
1-.33
0.33 * 0.67
0.2211/ sqrt(45)
qnorm(0.4, 0.33, 0.032) - qnorm(0.2, 0.33, 0.032)
pnorm(9.5, 10, 1.25/sqrt(15)) - pnorm(9, 10, 1.25/sqrt(15))
sqrt(45)
0.2211/6.708
qnorm(0.4, 0.33, 0.032)
qnorm(0.2, 0.33, 0.032)
pnorm(18, 0.33, 0.032) - pnorm(9, 0.33, 0.032)
pnorm(18, 0.33, 0.032) - pnorm(9, 0.33, 0.032)
pnorm(18, 0.33, 0.032)
pnorm(9, 0.33, 0.032)
pnorm(9, 0.33, 0.0329)
pnorm(18, 0.33, 0.0329)
pnorm(2.5, 0, 1)
1-pnorm(2.5, 0, 1)
pnorm(190, 172, 29/5)
2/5
29/5
pnorm(190, 172, 5.8)
pnorm(190,172,29)
1-pnorm(190,172,29)
1-pnorm(190,172,29)
1-pnorm(190, 172, 5.8)
pnorm(260,268,3)
pnorm(6.2, 6.0,1)
pnorm(6.2, 6.0,1/10)
1-pnorm(190,172,29/5)
pnorm(260,268,3)
pnorm(6.2, 6.0,1)
pnorm(6.2, 6.0,1/10)
1- pnorm(54, 66,6)
pnorm(170,160,8)
1-pnorm(170,160,8)
1-pnorm(180,160,8)
pnorm(40,28,8) - pnorm(20,28,8)
pnorm(30,28,8)
qnorm(.25,28,8)
pnorm(40,28,8) - pnorm(20,28,8)
pnorm(30,28,8)
qnorm(.25,28,8)
1- pnorm(4.7,5.0,0.5/sqrt(20))
1- pnorm(4.7,5.0,0.5/sqrt(20))
pnorm(4.8,5.0,0.5/sqrt(20))
pbinom(1, size=10, prob=0.1)
dbinom(9, size=10, prob=0.9)
qnorm(.75,80,10) - qnorm(.25,80,10)
2.5/500
qnorm(10/100, 8.5/100 , 2.5/500)
1- pnorm(10, 8.5 , 2.5/5)
pbinom(1, size = 8, prob = 0.1)
dbinom(2,  size = 8, prob = 0.1) + dbinom(3,  size = 8, prob = 0.1)
pbinom(8, size = 8, prob = 0.1)
dbinom(8, size = 8, prob = 0.1)
1 – pbinom(15 , 125, 0.1)
pbinom(15 , 125, 0.1)
1- 0.8169
1- [pbinom(15 , 125, 0.1)]
pbinom(14 , 125, 0.1)
1- 0.7329886
pbinom(9 , 125, 0.1)
pbinom(9 , 125, 0.1)
pbinom(10 , 125, 0.1)
qnorm(0.8, 0.7, 0.21/ sqrt(50))
qnorm(0.2, 0.7, 0.21/ sqrt(50))
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
pnorm(0.8, 0.7, 0.21/ sqrt(50))
0.7 * 0.3
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
1- pnorm(0.5, 0.7, 0.21/ sqrt(50))
1- pnorm(0.8, 0.7, 0.21/ sqrt(50))
0.21/ sqrt(50)
0.1/0.02969848
sqrt(0.21)
a.	1 – pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1 – pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1–pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1-pnorm(0.8 , 0.3 , 0.458/sqrt(50))
1-pnorm(0.8 , 0.7 , 0.458/sqrt(50))
1-pnorm(0.5 , 0.7 , 0.458/sqrt(50))
c <-
v <- c( 7, -5, -8, 7, 9, 12, 0, 3, 11, 8, 6, -2, 4)
order(v)
a.	Pbinom( 3, 5, 0.8)
pbinom( 3, 5, 0.8)
1 - 0.262
pbinom( 0, 5, 0.8)
qnorm(0.1, 20,4)
4/100
dbinom(0,20,0.04)
pbinom(0,20,0.04)
1- 0.4420024
qnorm(0.25, 11.90,40)
qnorm(0.25, 11.90,.40)
qnorm(0.25, 11.90,0.40)
1- 0.01
dbinom(5, 300, 0.01)
2.3/20
1-0.115
pbinom(2, 20, 0.115)
1- 0.59
4/60
1 - pexp(15,0.0666)
pbinom(18,45,0.33)
pbinom(18,45,0.33) - pbinom(9, 45, 0.33)
pbinom(17,45,0.33) - pbinom(9, 45, 0.33)
pbinom(9, 45, 0.33)
pbinom(18,45,0.33)
pbinom(18,45,0.33) - pbinom(9, 45, 0.33)
pbinom(18.5,45,0.33) - pbinom(8.5, 45, 0.33)
pbinom(40.5,45,0.33) - pbinom(19.5, 45, 0.33)
qnorm(85,70,8)
qnorm(0.85,70,8)
pbinom(10,125,0.1)
pbinom(9,125,0.1)
45/20
2.25/20
2.3/20
1 - pbinom(2,20, 0.115)
ppois(1,3/20)
dbinom(5,300, 0.01)
dexp(11,1/5) + dexp(12,1/5) + dexp(13,1/5) +dexp(14,1/5) + dexp(15,1/5)
1 - pbinom(3.5,0.8)
1 - pbinom(3,5,0.8)
ppois(2,8)
ppois(1,3/20)
qnorm(0.03,10,2)
1 - pexp(1,0.5)
pnorm(46,50,4)
1 - pnorm(46,50,4)
qnorm(46,50,4)
qnorm(0.46,50,4)
pnorm(46,50,4)
pnorm(29000,29321,2120/sqrt(100))
pnorm(215,220,15/sqrt(40))
rm(list = ls(all=TRUE))
pnorm(29000,29321,2120/sqrt(100))
pnorm(215,220,15/sqrt(40))
1.64 *
1.64 * 0.449
1.64*0.449
sqrt(880.4)
0.14583–1.96*sqrt(0.14583*0.854/1200)
0.14583 - 1.96*sqrt(0.14583*0.854/1200)
0.14583 + 1.96*sqrt(0.14583*0.854/1200)
pnorm(215,220,15/sqrt(40))
qnorm(0.05,lower.tail = F)
marginError <- qnorm(0.05,lower.tail = F)*4.49/10
49 - marginError
49 + marginError
z <- qnorm(0.025, lower.tail = F)
n <-
p <- 175/1200
q <- 1-p
p - 1.96*sqrt(p*q/1200)
p - 1.96*sqrt(p*q/1200)
p + 1.96*sqrt(p*q/1200)
lowerLimit <- p - 1.96*sqrt(p*q/1200)
UpperLimit <- p + 1.96*sqrt(p*q/1200)
n <- 35
mean <- 2.364
var <- 0.81
qt(0.05,34,lower.tail = F) // we have 34 degrees of freedom
qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
tvalue <- qt(0.05,34,lower.tail = F) # we have 34 degrees of freedom
2.364 - tvalue * 0.9
2.364 + tvalue * 0.9
2.364 - tvalue * 0.9/sqrt(35)
2.364 + tvalue * 0.9/sqrt(35)
qnorm(0.025,lower.tail = F)
z <-qnorm(0.025,lower.tail = F)
marginError <- qnorm(0.025,lower.tail = F)
lowerLimit <- 1014 - marginError*25/10
upperLimit <- 1014 + marginError*25/10
lowerLimit
upperLimit
marginError*25/10
n <- 36
z <- qnorm(0.025,lower.tail = F)
ME <- z * 0.3/sqrt(n)
lowerLimit <- 2.6 - ME
upperLimit <- 1014 + ME
lowerLimit,upperLimit
c(lowerLimit,upperLimit)
upperLimit <- 2.6 + ME
c(lowerLimit,upperLimit)
qnorm(0.05, lower.tail = F)
pnorm(1.164,9900,120/sqrt(30))
limitOnCriticalZone <- qnorm(0.05,lower.tail = F)
pnorm(9900,10000,120/sqrt(30))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
options(scipen = pnorm(9900,10000,120/sqrt(30)))
x <- options(scipen = pnorm(9900,10000,120/sqrt(30)))
x
alpha <- 0.05
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 4)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 5)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 1)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
x <- options(scipen = 2)
pnorm(9900,10000,120/sqrt(30)) # output 2.50
pnorm(9900,10000,120/sqrt(30)) # output 2.50
limitOnCriticalZone
actual <- pnorm(9900,10000,120/sqrt(30)) # output 0.000002505166
actual
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
As actual < limitOnCriticalZone, we can reject Manufacturer's claim
mean <- 10000
n = 30
smean = 9900
sd = 120
zval <- (9900-10000)/(120/sqrt(30))
zval
sqrt(100*0.84*0.16)
1 - pnorm(80,84,3.67)
qnorm(p.95, lower.tail = F)
qnorm(0.95, lower.tail = F)
cal <- (80-84)/ sqrt(100*0.84*0.16)
cal <- (84-80)/ sqrt(100*0.84*0.16)
qnorm(0.95, lower.tail = F)
qnorm(0.95)
qnorm(0.025)
n <- 100
p <- 0.9
q <- 1- p
1 - pnorm(80.5, n*p, sqrt(n*p*q))
pnorm(80.5, n*p, sqrt(n*p*q))
qnorm(0.95, lower.tail = F)
qnorm(0.025)
75 - (8 /sqrt(16) * qnorm(0.25))
75 - (8 /sqrt(16) * qnorm(0.025))
75- (8 /sqrt(16) * qnorm(1-0.025))
75  + (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025))
75 - (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
75  + (8 /sqrt(16) * qnorm(0.025, lower.tail=F))
qnorm(0.05)
1-pnorm(10,11,3/sqrt(40))
3/sqrt(40)
-1/0.474
q(0.05)
qnorm(0.05)
1-0.05
q(0.975)
qnorm(0.0025)
0.05/2
qnorm(0.025)
1.96*2
qnorm(0.10)
1.28*21/6
50-4.48
1 - pnorm(45, 43, 21/6)
1 - pnorm(45.31, 43, 21/6)
pnorm(78.92, 77, 2)
pca_std <- princomp(cor(x_train), cor = T)
rm(list=ls(all=T))
getwd()
setwd('E://Insofe//Week7//Lab//Day1//20180120//housing_data')
housing_raw <- read.csv('housing_data.csv', header = T, sep = ',')
summary(housing_raw)
str(housing_raw)
#is.na(housing_raw)
#na.omit(housing_raw)
housing_numeric <- subset(housing_raw, select = -c(CHAS,RAD))
library(DMwR)
housing_numeric <- knnImputation(housing_numeric)
sum(is.na(housing_numeric))
rows <- seq(1, nrow(housing_numeric),1)
set.seed(123)
trainRows <- sample(rows, 70* nrow(housing_numeric)/100)
housing_train <- housing_numeric[trainRows,]
housing_test <- housing_numeric[-trainRows,]
x_train <- housing_train[, -ncol(housing_train)]
x_test <- housing_test[, -ncol(housing_test)]
y_train <- housing_train[, ncol(housing_train)]
y_test <- housing_test[, ncol(housing_test)]
pca <- princomp(x_train)
pca$scores
pca$loadings
pca_std <- princomp(cor(x_train), cor = T)
pca_train = predict(pca, x_train)
pca_test = predict(pca, x_test)
pca_std_train = predict(pca_std, cor(x_train)
pca_std_train = predict(pca_std, cor(x_train))
pca_std_train = predict(pca_std, cor(x_train))
pca_std_test = predict(pca_std, cor(x_test))
pca_std_train = predict(pca_std, x_train)
pca_std_test = predict(pca_std, x_test)
pca_std_train = predict(pca_std, x_train)
pca_std_test = predict(pca_std, x_test)
#using standard pca
train4 = data.frame(pca_train[,1:3], y_train)
test4 = data.frame(pca_test[,1:3], y_test)
LinRegpca <- lm(y_train~., data = train4)
LinRegstdpca <- lm(y_train~., data = train4)
summary(LinRegstdpca)
regr.eval(train4$y_train, LinRegstdpca$fitted.values)
predstdpca = predict(LinRegstdpca, test4)
regr.eval(test4$y_test, predstdpca)
summary(pca_std)
summary(pca_std)

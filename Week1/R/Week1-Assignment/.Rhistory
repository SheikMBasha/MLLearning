library(rJava)
rjava
library(rJava)
cls
clear
library(rJava)
library("abind", lib.loc="C:/Program Files/R/R-3.4.2/library")
detach("package:abind", unload=TRUE)
library(rJava)
# Mathematical operations
2+2
2+2
# Mathematical operations
2+2
# Mathematical operations
2+2
2+ 3^2
55/5
sqrt(25)
age <- c(20,25,30,35,40)
length(age)
age
age <- c(20,25,30,35,40,"Twenty Five")
age
class(age)
age <- c(20,25,30,35,40)
class(age)
age2 <- c(20,25,30,35,40,"Twenty Five")
age2
class(age2)
age3 <- ("Basha","sheik",TRUE)
age3 <- c("Basha","sheik",TRUE)
age3
class(age3)
team <- c("Basha","Sheik",25,"Triveni Nagar", FALSE)
team
class(team)
len(team)
length(team)
team <- C("Basha","Sheik",25,"Triveni Nagar", FALSE)
team <- c("Basha","Sheik",25,"Triveni Nagar", FALSE)
team <- C("Basha","Sheik",25,"Triveni Nagar", FALSE)
team <- c("Basha","Sheik",25,"Triveni Nagar", FALSE)
marks <- c(12,13,14,15,14,13,12,13,14,15,14,13)
length(marks)
matrix(marks, nrow = 3)
students <- matrix(marks, nrow = 3)
dim(students)
View(students)
View(students)
# Create a matrix with other order having quizes in rows and Students in rows
T(students)
t(students)
# to find number of rows and cols of a matrix
nrow(students)
ncol(students)
students <- matrix(marks, nrow= 3, byrow = F)
students
students <- matrix(marks, nrow= 4, byrow = F)
students
students <- matrix(marks, nrow= 4)
students
students
students <- matrix(marks, nrow= 4)
students
#flip the order
students <- matrix(marks, nrow=4, byrow = T)
students
#Create a DataFrame(above matrix with EducationQualification added)
students <- matrix(marks, nrow=4)
#Create a DataFrame(above matrix with EducationQualification added)
students <- matrix(marks, nrow=4)
students
education <- c("Btech", "Msc", "Phd")
res <- c(students, education)
res
#Create a DataFrame(above matrix with EducationQualification added)
students <- matrix(marks, nrow=4)
students
education <- c("Btech", "Msc", "Phd","BA")
res <- c(students, education)
res # now matrix is of type string, so convert it to dataframe
res <- data.frame(students,education)
res
res <- c(students, Education)
res <- c(students, education)
res
res
res <- data.frame(students,education)
res
# List doesnt need dimenstion like matrix, 1st row can have 4 elements, 2nd row can have 5 elements
# 3rd row can have 0 elements.
listResult <- list(marks, students, res)
# collection of heterogeneous data structers vector, matrix and dataframe
listResult
#Refer 1st element of list
list[[1]]
#Refer 1st element of list
listResult[[1]]
listResult[[2]]
listResult[[3]]
listResult[1]
#listResult[1] is a pointer and gives data but we cannot perform any operation on it.
listResult[1] + 1
listResult[[1]] + 1
listResult[[1](1)]
listResult[[1]][1]
marks[5]
marks
marks[3]
#4th and 7th Element
marks[4,7]
#4th and 7th Element
marks[4:7]
#4th and 7th Element
marks[c(4,7)]
#Got more than 14
marks >= 15
#Got more than 14
marks >= 14
marks
#create vector with marks >= 14
marks[marks >= 14]
empAge <- c(25,35,28,29,30)
empGender <- c(M,F,F,M,F)
empGender <- c("M","F","F","M","F")
empSal <- c(10000,15000,25000,30000,40000)
emp <- data.frame(empAge,empGender,empSal)
emp
#Q1
emp[empAge > 25]
#Q1
emp[[3]][empSal>25]
#Q1
emp[[3]][empAge>25]
#Q2
emp[[2]][empGender = "F"]
length(emp[[2]])
length(emp[[2]][empGender == "F"])
#Q3
avgSal <- avg(emp[[3]][empSal])
#Q3
avgSal <- average(emp[[3]][empSal])
#Q3
mean(emp[[2]])
#Q3
avgSal <- mean(emp[[2]])
mean(emp[[2]][empSal])
mean(c(emp[[2]])
mean(c(emp[[2]])
#avg salary
emp[[2]]
#avg salary
emp[[3]]
#avg salary
mean(emp[[3]])
#avg salary
avgSal <- mean(emp[[3]])
avgSal
emp[[3]][empSal > avgSal]
#Q4
emp[[2]][empSal > avgSal]
#Q4
empGenderM <- emp[[2]][empSal > avgSal]
empGenderM
empGenderM
emp[[2]][empSal > avgSal]
emp[[2]][empSal > avgSal]
emp[[3]][empSal > avgSal]
emp[[2]][empSal > avgSal]
#Q4
emp[[3]][(empSal > avgSal) & (empGender = "M)]
#Q4
empGenM <- emp[[3]][(empSal > avgSal) & (empGender = "M)]
#Q4
emp[[3]][(empSal > avgSal) & (empGender = "M")]
#Q4
emp[[3]][(empSal > avgSal) && (empGender = "M")]
#Q4
emp[[3]][(empSal > avgSal) & (empGender = "M")]
#Q4
emp[[3]][(empSal > avgSal) & (empGender == "M")]
#Q4
emp[[3]][(empSal > avgSal) & (empGender == "M")]
#Q4
emp[[2]][(empSal > avgSal) & (empGender == "M")]
#Q4
emp[[3]][(empSal > avgSal) & (empGender == "F")]
length(emp[[3]][empAge>25])
#Q1
emp[[3]][empAge>25]
# or alternate solution
emp[emp$empAge>26]
# or alternate solution
emp$empAge>26
emp[emp$empAge>26]
emp[2,]
# get second and fifth row
emp[c(2,5),]
emp[,2]
# get 1st nd 3rd column
emp[,c(1,3)]
emp[,1]
emp$empAge > 26
emp[emp$empAge > 26]
emp[emp$empAge > 26,]
emp$empGender = "F"
emp$empGender == "F"
emp[emp$empGender == "F",]
nrow(emp$empGender == 'F')
nrow(emp$empGender == 'F',)
nrow(emp[emp$empGender == 'F',])
#Q3
avgSal
mean(emp$empSal)
emp[emp$empSal > mean(emp$empSal)]
emp[emp$empSal > mean(emp$empSal),]
#double variable filters
emp$empSal > mean(emp$empSal)
emp[emp$empSal > mean(emp$empSal)& emp$empGender == 'M',]
emp[emp$empSal > mean(emp$empSal)& emp$empGender == 'F',]
1:10
seq(1,20,0.2)
library(rJava)
# Mathematical operations
2+2
# Order Character , Numeric and Logical
###############################  Explicit Coercion #########################
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
#Coercion results in NAs.
x <- c("25-35", "twenty five", "twenty eight",25,'25-35')
x
as.numeric(x)
as.logical(x)
m <- 1:10
m
dim(m)
dim(m) <- c(2, 5)
m
m
x <- 1:3
x
y <- 10:12
y
cbind(x, y)
rbind(x, y)
x <- list(c(1,2), "a", TRUE)
x
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 3)
is.na(x)
is.nan(x)
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
nrow(x)
ncol(x)
############################ Names & list #####################
x <- list(a = 1, b = 2, c = 3)
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m <- matrix(1:4, nrow = 2, ncol = 2)
m
m <- matrix(c(1:4), nrow = 2, ncol = 2)
m
x <- data.frame(Age = c(25,30,35,40), Working = c(T, T, F, F))
x
nrow(x)
ncol(x)
############################ Names & list #####################
x <- list(a = 1, b = 2, c = 3)
x
########################  Names & Matrix ###########################
m <- matrix(1:4, nrow = 2, ncol = 2)
m
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
x[1]
x <- c(2,4,6,6,8,2)
x[1]
x[2]
x[1:4]
x > 2
x[x > 2]
u <- x>2
u
x[u]
#############################  Sub-set of a matrix ####################
#Matrices can be subset in the usual way with (i , j) type indices.
x <- matrix(1:6, 2, 3)
x
x[1, 2]
x[2, 1]
# row/column  Indices can also be excluded as cited below to get only columns or only rows respectively
x[1, ]
x[, 2]
x <- c(1, 2, NA, 4, NA, 5)
x
! is.na(x)
x[! is.na(x)]
y=na.omit(x)
y
na.omit(x)
y=na.omit(x)
y
x <- 1:4; y <- 6:9
x
y
x + y
x > 2
x * y
x <- matrix(1:4, 2, 2);
x
y <- matrix(rep(10, 4), 2, 2)
y
x * y ## element-wise multiplication
x / y
x %*% y        ## true matrix multiplication
#################### Data Types (vectors, matrices & dataframes) ####################
v1=c(1,2,3,4,5) #numeric vector
v2=c("a","b","c","d","e") #character vector
v3=c(TRUE,FALSE,TRUE,FALSE,TRUE) #logical vector
str(v1) #to view structure of the vector
str(v1) #to view structure of the vector
length(v1) #to get number of  elements in the vector
str(v2)
str(v3)
str(c("fg","gh"))
cbind(v1,v2,v3) #column binding
rbind(v1,v2,v3) #row binding
#Playing with a vector
v4 = c(10,9,8,7,6,5)
max(v4)
min(v4)
mean(v4)
sd(v4)
v4[c(1,3)]#To get 1st and 3rd item
v4[v4=8] #To get elements which are greater than 8
v4
v4=8
v4
#Playing with a vector
v4 = c(10,9,8,7,6,5)
v4[v4>8] #To get elements which are greater than 8
#Matrix and data frame
M=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=TRUE) # to create a matrix
ls()
data = data.frame(v1,v2,v3) # to create a data frame
names(data)
colnames(data)
data
data
names(data) = c("ID","Name","Selected") # to assign variable names
data
data1 = data[,c(2:3)]
data1
#Handling missing values in the data
v=c(10,25,20,NA,36,100)
mean(v,na.rm=TRUE)
mean(v)
is.na(v)
v[is.na(v)]=555
v
#################### Data Types (vectors, matrices & dataframes) ####################
v1=c(1,2,3,4,5) #numeric vector
v2=c("a","b","c","d","e") #character vector
v3=c(TRUE,FALSE,TRUE,FALSE,TRUE) #logical vector
str(v1) #to view structure of the vector
str(c("fg","gh"))
cbind(v1,v2,v3) #column binding
rbind(v1,v2,v3) #row binding
attach(mtcars)
str(mtcars)
summary(mtcars)
rm(list = (ls = TRUE))
rm(list = ls(all = TRUE))
attach(mtcars)
data <- mtcars
data
View(data)
str(mtcars)
summary(mtcars)
data[,2:11]
data[,c("mpg","cyl")]
data[mpg>25]
data[mpg>25,]
data$mpg > 25
data[data$mpg > 25]
data[data$mpg > 25,]
subset(data,mpg>25, select = mpg:carb)
subset(data,mpg>25)
subset(data,mpg>25, select = mpg:cyl)
data[mpg>25 | hp >75,]
subset(data, mpg>25 | hp >75 , select = mpg:carb)
filter(data,mpg>25)
data[which(mpg>25 | hp >75)]
data[which(mpg>25 | hp >75),]
data[data$mpg >25 | data$hp > 75,]
data[mpg>25 | hp>75,]
subset(data, mpg>25 | hp>75, select= mpg:carb)
data[which(mpg>25,hp>75),]
HighestWinnerBasedOnSeason(2008)
#17. Find the teams which has won highest e no of matches in ipl season 2008,2010 and 2016.
HighestWinnerBasedOnSeason <- function(x){
y <- subset(iplmatches, season == x, select = winner)
y <- table(y)
return(y[which.max(y)])
}
HighestWinnerBasedOnSeason(2008)
setwd("E:\\Insofe\\R\\Week1-Assignment")
#1. Read the Ipl_matches.csv file in to iplmatches.
iplmatches <- read.csv("Ipl_Matches.csv", header = T, sep = ",")
#17. Find the teams which has won highest e no of matches in ipl season 2008,2010 and 2016.
HighestWinnerBasedOnSeason <- function(x){
y <- subset(iplmatches, season == x, select = winner)
y <- table(y)
return(y[which.max(y)])
}
HighestWinnerBasedOnSeason(2008)
